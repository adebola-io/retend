@title components
@description Defines the component syntax for the Retend web framework.

---

@example 1
@input Basic component returning a div.
function MyComponent() {
  return <div />;
}
@note Component names must be PascalCase.

---

@example 2
@input Component with text content.
function Greeting() {
  return <div>Hello</div>;
}

---

@example 3
@input Component returning a button.
function ActionButton() {
  return <button type="button" />;
}

---

@example 4
@input Component with a text prop.
function Message(props) {
  const { text } = props;
  return <div>{text}</div>;
}
@note If props are defined, they must be destructured at the start of the component.

---

@example 5
@input Using the Message component.
<Message text="Welcome!" />

---

@example 6
@input Component with two props.
function UserCard(props) {
  const { name, age } = props;
  return <div><p>Name: {name}</p><p>Age: {age}</p></div>;
}
@note If props are defined, they must be destructured at the start of the component.

---

@example 7
@input Using the UserCard component.
<UserCard name="Alice" age={30} />

---

@example 8
@input Component with style prop.
function StyledDiv(props) {
  const { style } = props;
  return <div style={style} />;
}

---

@example 9
@input Using the StyledDiv component.
<StyledDiv style={{ color: 'blue' }} />

---

@example 10
@input Component with class prop.
function ClassedSpan(props) {
  const { class: className } = props;
  return <span class={className} />;
}
@note Always use `class: className` to destructure reserved word 'class'.

---

@example 11
@input Using the ClassedSpan component.
<ClassedSpan class="highlight" />

---

@example 12
@input Component with children prop (implicit).
function Card(props) {
  const { children } = props;
  return <div class="card">{children}</div>;
}
@note Access children directly by destructuring `props.children`.

---

@example 13
@input Using the Card component with children.
<Card>This is card content.</Card>

---

@example 14
@input Component with boolean prop.
function Checkbox(props) {
  const { checked } = props;
  return <input type="checkbox" checked={checked} />;
}

---

@example 15
@input Using the Checkbox component, checked.
<Checkbox checked />
@note Boolean props on components can omit `=true`.

---

@example 16
@input Using Checkbox component, unchecked.
<Checkbox />

---

@example 17
@input Component with prop for list items.
function DynamicList(props) {
  const { items } = props;
  return (
    <ul>
      {items}
    </ul>
  );
}
@note Do not use Array.map to loop over items in Retend JSX.

---

@example 18
@input Using DynamicList component.
<DynamicList items={[<li>Item A</li>, <li>Item B</li>]} />
@note Items are passed directly as JSX array.

---

@example 19
@input Component with 'for' prop for label.
function LabeledInput(props) {
  const { labelText, inputId } = props;
  return (
    <label for={inputId}>
      {labelText}
      <input type="text" id={inputId} />
    </label>
  );
}
@note Retend uses 'for' attribute for labels, not 'htmlFor'.

---

@example 20
@input Using the LabeledInput component.
<LabeledInput labelText="Email:" inputId="email-input" />

---

@example 21
@input Component for a self-closing image.
function IconImage(props) {
  const { src, alt } = props;
  return <img src={src} alt={alt} />;
}

---

@example 22
@input Using the IconImage component.
<IconImage src="/images/icon.png" alt="App Icon" />

---

@example 23
@input Component for a link with href and text.
function SimpleLink(props) {
  const { href, text } = props;
  return <a href={href}>{text}</a>;
}

---

@example 24
@input Using the SimpleLink component.
<SimpleLink href="https://example.com" text="Example Link" />

---

@example 25
@input Component accepting props object directly (not destructured - for passing down).
function ForwardPropsButton(props) {
  const { children, ...rest } = props;
  return <button type="button" {...rest}>{children}</button>;
}
@note Prop object can be spread when passing down to other elements/components.

---