@title cell.ref.txt
@description Demonstrates the usage of cells in Retend JSX for reactive state management.
@preamble Examples showcasing how to use Cell.source, Cell.derived, and effects in Retend JSX. Cells are imported from 'retend'. Reactivity is maintained by using the cell object directly in JSX, not .value.

---

@example 1
@input Simple div with a cell for text content.
@output
import { Cell } from 'retend';

const SimpleDiv = () => {
  const message = Cell.source('Hello, world!');
  return <div>{message}</div>;
};
@note The cell `message` is used directly in JSX to maintain reactivity.

---

@example 2
@input Paragraph with a cell for text.
@output
import { Cell } from 'retend';

const Paragraph = () => {
  const text = Cell.source('This is a paragraph.');
  return <p>{text}</p>;
};

---

@example 3
@input Span with a cell for inline text.
@output
import { Cell } from 'retend';

const InlineText = () => {
  const inline = Cell.source('Inline text');
  return <span>{inline}</span>;
};

---

@example 4
@input Heading with a cell for title.
@output
import { Cell } from 'retend';

const Heading = () => {
  const title = Cell.source('Page Title');
  return <h1>{title}</h1>;
};

---

@example 5
@input Button with a cell for label.
@output
import { Cell } from 'retend';

const ButtonLabel = () => {
  const label = Cell.source('Click me');
  return <button type="button">{label}</button>;
};

---

@example 6
@input Anchor with a cell for href.
@output
import { Cell } from 'retend';

const DynamicLink = () => {
  const url = Cell.source('https://example.com');
  return <a href={url}>Visit Example</a>;
};
@note The cell `url` is used directly for the `href` attribute to ensure reactivity.

---

@example 7
@input Image with a cell for src.
@output
import { Cell } from 'retend';

const DynamicImage = () => {
  const imageSrc = Cell.source('/image.png');
  return <img src={imageSrc} alt="Dynamic Image" />;
};

---

@example 8
@input Input with a cell for placeholder.
@output
import { Cell } from 'retend';

const PlaceholderInput = () => {
  const placeholder = Cell.source('Enter text');
  return <input type="text" placeholder={placeholder} />;
};

---

@example 9
@input Button with a cell for disabled state.
@output
import { Cell } from 'retend';

const DisableButton = () => {
  const isDisabled = Cell.source(false);
  return <button type="button" disabled={isDisabled}>Action</button>;
};
@note Boolean attributes like `disabled` use cells directly.

---

@example 10
@input Checkbox with a cell for checked state.
@output
import { Cell } from 'retend';

const CheckBox = () => {
  const isChecked = Cell.source(false);
  return <input type="checkbox" checked={isChecked} />;
};

---

@example 11
@input Div with a cell for background color.
@output
import { Cell } from 'retend';

const ColoredDiv = () => {
  const color = Cell.source('red');
  return <div style={{ backgroundColor: color }} />;
};
@note The cell `color` is used within the style object for reactivity.

---

@example 12
@input Span with a cell for font size.
@output
import { Cell } from 'retend';

const FontSizeSpan = () => {
  const size = Cell.source('16px');
  return <span style={{ fontSize: size }}>Text</span>;
};

---

@example 13
@input Button with a cell for width.
@output
import { Cell } from 'retend';

const WidthButton = () => {
  const width = Cell.source('100px');
  return <button type="button" style={{ width: width }}>Click</button>;
};

---

@example 14
@input Div with a class based on a derived cell.
@output
import { Cell } from 'retend';

const ConditionalClass = () => {
  const isActive = Cell.source(true);
  const className = Cell.derived(() => isActive.value ? 'active' : 'inactive');
  return <div class={className} />;
};
@note A derived cell computes the class name reactively.

---

@example 15
@input Button that changes text based on a derived cell.
@output
import { Cell } from 'retend';

const ToggleButton = () => {
  const isOn = Cell.source(false);
  const label = Cell.derived(() => isOn.value ? 'On' : 'Off');
  return <button type="button">{label}</button>;
};

---

@example 16
@input Unordered list from an array cell.
@output
import { Cell, For } from 'retend';

const FruitList = () => {
  const fruits = Cell.source(['Apple', 'Banana', 'Cherry']);
  return <ul>{For(fruits, (fruit) => <li>{fruit}</li>)}</ul>;
};
@note `For` is used to render the list items reactively.
@note do not use .map to loop over items in Retend JSX.

---

@example 17
@input Ordered list from an array cell.
@output
import { Cell, For } from 'retend';

const NumberList = () => {
  const numbers = Cell.source([1, 2, 3]);
  return <ol>{For(numbers, (num) => <li>{num}</li>)}</ol>;
};
@note `For` is used to render the list items reactively.
@note do not use .map to loop over items in Retend JSX.

---

@example 18
@input Display user name from an object cell.
@output
import { Cell } from 'retend';

const UserName = () => {
  const user = Cell.source({ name: 'John Doe', age: 30 });
  const name = Cell.derived(() => user.value.name);
  return <div>{name}</div>;
};
@note A derived cell accesses the `name` property reactively.

---

@example 19
@input Display user age from an object cell.
@output
import { Cell } from 'retend';

const UserAge = () => {
  const user = Cell.source({ name: 'John Doe', age: 30 });
  const age = Cell.derived(() => user.value.age);
  return <div>Age: {age}</div>;
};

---

@example 20
@input Input bound to a cell with change handler.
@output
import { Cell } from 'retend';

const TextInput = () => {
  const text = Cell.source('');
  const handleChange = (event) => {
    text.value = event.target.value;
  };
  return <input type="text" onInput={handleChange} />;
};
@note do not use `value` attribute for input elements.

---

@example 21
@input Checkbox bound to a cell with change handler.
@output
import { Cell } from 'retend';

const CheckBoxInput = () => {
  const isChecked = Cell.source(false);
  const handleChange = (event) => {
    isChecked.value = event.target.checked;
  };
  return <input type="checkbox" checked={isChecked} onChange={handleChange} />;
};

---

@example 22
@input Div with dynamic class based on multiple conditions.
@output
import { Cell } from 'retend';

const DynamicClassDiv = () => {
  const isActive = Cell.source(true);
  const isHighlighted = Cell.source(false);
  const className = Cell.derived(() => {
    const classes = [];
    if (isActive.value) classes.push('active');
    if (isHighlighted.value) classes.push('highlight');
    return classes.join(' ');
  });
  return <div class={className} />;
};

---

@example 23
@input Image with alt text from a cell.
@output
import { Cell } from 'retend';

const AltImage = () => {
  const altText = Cell.source('An image');
  return <img src="/image.png" alt={altText} />;
};

---

@example 24
@input Link with target attribute from a cell.
@output
import { Cell } from 'retend';

const TargetLink = () => {
  const target = Cell.source('_blank');
  return <a href="https://example.com" target={target}>Link</a>;
};

---

@example 25
@input Div with inline style object from a cell.
@output
import { Cell } from 'retend';

const StyledDiv = () => {
  const style = Cell.source({ color: 'blue', fontSize: '20px' });
  return <div style={style} />;
};

---

@example 26
@input Button with dynamic type.
@output
import { Cell } from 'retend';

const DynamicTypeButton = () => {
  const buttonType = Cell.source('button');
  return <button type={buttonType}>Click</button>;
};

---

@example 27
@input Input with dynamic type.
@output
import { Cell } from 'retend';

const DynamicInput = () => {
  const inputType = Cell.source('text');
  return <input type={inputType} />;
};

---

@example 28
@input Textarea with rows from a cell.
@output
import { Cell } from 'retend';

const RowsTextArea = () => {
  const rows = Cell.source(5);
  return <textarea rows={rows} />;
};

---

@example 29
@input Select with options from an array cell.
@output
import { Cell, For } from 'retend';

const SelectOptions = () => {
  const options = Cell.source(['Option 1', 'Option 2', 'Option 3']);
  return <select>{For(options, (opt) => <option value={opt}>{opt}</option>)}</select>;
};
@note `For` is used to render the list items reactively.
@note do not use .map to loop over items in Retend JSX.

---

@example 30
@input Div with aria-label from a cell.
@output
import { Cell } from 'retend';

const AriaLabelDiv = () => {
  const label = Cell.source('Close');
  return <div aria-label={label} />;
};

---

@example 31
@input Time element with datetime from a cell.
@output
import { Cell } from 'retend';

const DynamicTime = () => {
  const dateTime = Cell.source('2024-01-01');
  return <time dateTime={dateTime}>January 1, 2024</time>;
};

---

@example 32
@input Abbr with title from a cell.
@output
import { Cell } from 'retend';

const DynamicAbbr = () => {
  const title = Cell.source('Hypertext Markup Language');
  return <abbr title={title}>HTML</abbr>;
};

---

@example 33
@input Code element with content from a cell.
@output
import { Cell } from 'retend';

const CodeSnippet = () => {
  const code = Cell.source('console.log("Hello");');
  return <code>{code}</code>;
};

---

@example 34
@input Pre with code block from a cell.
@output
import { Cell } from 'retend';

const CodeBlock = () => {
  const code = Cell.source('function hello() { console.log("Hello"); }');
  return <pre><code>{code}</code></pre>;
};

---

@example 35
@input Blockquote with cite from a cell.
@output
import { Cell } from 'retend';

const Quote = () => {
  const cite = Cell.source('https://example.com');
  return <blockquote cite={cite}>Quote text.</blockquote>;
};

---

@example 36
@input Mark element with text from a cell.
@output
import { Cell } from 'retend';

const Highlight = () => {
  const text = Cell.source('Highlighted');
  return <mark>{text}</mark>;
};

---

@example 37
@input Small element with text from a cell.
@output
import { Cell } from 'retend';

const SmallText = () => {
  const text = Cell.source('Small print');
  return <small>{text}</small>;
};

---

@example 38
@input Subscript with number from a cell.
@output
import { Cell } from 'retend';

const SubScript = () => {
  const number = Cell.source(2);
  return <sub>{number}</sub>;
};

---

@example 39
@input Superscript with exponent from a cell.
@output
import { Cell } from 'retend';

const SuperScript = () => {
  const exponent = Cell.source(2);
  return <sup>{exponent}</sup>;
};

---

@example 40
@input Div showing sum of two cells.
@output
import { Cell } from 'retend';

const SumDisplay = () => {
  const a = Cell.source(1);
  const b = Cell.source(2);
  const sum = Cell.derived(() => a.value + b.value);
  return <div>Sum: {sum}</div>;
};

---

@example 41
@input Paragraph showing if a number is even or odd.
@output
import { Cell } from 'retend';

const EvenOdd = () => {
  const number = Cell.source(4);
  const status = Cell.derived(() => number.value % 2 === 0 ? 'Even' : 'Odd');
  return <p>{status}</p>;
};

---

@example 42
@input Button that toggles a boolean cell.
@output
import { Cell } from 'retend';

const ToggleButton = () => {
  const isOn = Cell.source(false);
  const toggle = () => {
    isOn.value = !isOn.value;
  };
  const label = Cell.derived(() => isOn.value ? 'On' : 'Off');
  return <button type="button" onClick={toggle}>{label}</button>;
};

---

@example 43
@input Input that updates a cell on change.
@output
import { Cell } from 'retend';

const NameInput = () => {
  const name = Cell.source('');
  const handleChange = (event) => {
    name.value = event.target.value;
  };
  return (
    <div>
      <input type="text" onInput={handleChange} />
      <p>Hello, {name}!</p>
    </div>
  );
};

---

@example 44
@input Select with value bound to a cell.
@output
import { Cell } from 'retend';

const SelectInput = () => {
  const selected = Cell.source('option1');
  const handleChange = (event) => {
    selected.value = event.target.value;
  };
  return (
    <select value={selected} onChange={handleChange}>
      <option value="option1">Option 1</option>
      <option value="option2">Option 2</option>
    </select>
  );
};

---

@example 45
@input Radio buttons bound to a cell.
@output
import { Cell } from 'retend';

const RadioGroup = () => {
  const choice = Cell.source('option1');
  const handleChange = (event) => {
    choice.value = event.target.value;
  };
  const isOption1 = Cell.derived(() => choice.value === 'option1');
  const isOption2 = Cell.derived(() => choice.value === 'option2');
  return (
    <div>
      <label>
        <input
          type="radio"
          value="option1"
          checked={choice.value === 'option1'}
          onChange={handleChange}
        />
        Option 1
      </label>
      <label>
        <input
          type="radio"
          value="option2"
          checked={choice.value === 'option2'}
          onChange={handleChange}
        />
        Option 2
      </label>
    </div>
  );
};
@note `.value` is used in JS only for initial comparison, not reactivity.

---

@example 46
@input Div with background color based on a cell.
@output
import { Cell } from 'retend';

const BackgroundColorDiv = () => {
  const color = Cell.source('lightblue');
  return <div style={{ backgroundColor: color }} />;
};

---

@example 47
@input Span with font family from a cell.
@output
import { Cell } from 'retend';

const FontFamilySpan = () => {
  const font = Cell.source('Arial');
  return <span style={{ fontFamily: font }}>Text</span>;
};

---

@example 48
@input Image with width from a cell.
@output
import { Cell } from 'retend';

const WidthImage = () => {
  const width = Cell.source('200px');
  return <img src="/image.png" style={{ width: width }} alt="Image" />;
};

---

@example 49
@input Link with dynamic text and href.
@output
import { Cell } from 'retend';

const DynamicLink = () => {
  const url = Cell.source('https://example.com');
  const text = Cell.source('Visit Example');
  return <a href={url}>{text}</a>;
};

---

@example 50
@input Div with multiple classes from cells.
@output
import { Cell } from 'retend';

const MultiClassDiv = () => {
  const class1 = Cell.source('container');
  const class2 = Cell.source('main');
  return <div class={[class1, class2]} />;
};
@note Class can be an array of Cellular strings.

---

@example 51
@input Button with dynamic aria-label.
@output
import { Cell } from 'retend';

const AriaButton = () => {
  const label = Cell.source('Submit form');
  return <button type="button" aria-label={label}>Submit</button>;
};

---

@example 52
@input Input with max length from a cell.
@output
import { Cell } from 'retend';

const MaxLengthInput = () => {
  const maxLen = Cell.source(10);
  return <input type="text" maxLength={maxLen} />;
};

---

@example 53
@input Textarea with cols from a cell.
@output
import { Cell } from 'retend';

const ColsTextArea = () => {
  const cols = Cell.source(50);
  return <textarea cols={cols} />;
};

---

@example 54
@input Div with data attribute from a cell.
@output
import { Cell } from 'retend';

const DataDiv = () => {
  const itemId = Cell.source('123');
  return <div data-item-id={itemId} />;
};

---

@example 55
@input Link with rel attribute from a cell.
@output
import { Cell } from 'retend';

const RelLink = () => {
  const rel = Cell.source('noopener');
  return <a href="https://example.com" rel={rel}>Link</a>;
};

---

@example 56
@input Image with loading attribute from a cell.
@output
import { Cell } from 'retend';

const LoadingImage = () => {
  const loading = Cell.source('lazy');
  return <img src="/image.png" loading={loading} alt="Image" />;
};

---

@example 57
@input Button with form attribute from a cell.
@output
import { Cell } from 'retend';

const FormButton = () => {
  const formId = Cell.source('myForm');
  return <button type="submit" form={formId}>Submit</button>;
};

---

@example 58
@input Input with pattern from a cell.
@output
import { Cell } from 'retend';

const PatternInput = () => {
  const pattern = Cell.source('[A-Za-z]{3}');
  return <input type="text" pattern={pattern} />;
};

---

@example 59
@input Div with tabindex from a cell.
@output
import { Cell } from 'retend';

const TabIndexDiv = () => {
  const tabIndex = Cell.source(0);
  return <div tabIndex={tabIndex} />;
};

---

@example 60
@input List of users with names and ages.
@output
import { Cell, For } from 'retend';

const UserList = () => {
  const users = Cell.source([
    { id: 1, name: 'Alice', age: 25 },
    { id: 2, name: 'Bob', age: 30 },
  ]);
  return (
    <ul>
      {For(users, (user) => (
        <li>
          {user.name}, {user.age}
        </li>
      ))}
    </ul>
    );
};
@note `For` is used to render the list items reactively.
@note do not use .map to loop over items in Retend JSX.
---

@example 61
@input Nested divs with dynamic classes.
@output
import { Cell } from 'retend';

const NestedDivs = () => {
  const outerClass = Cell.source('outer');
  const innerClass = Cell.source('inner');
  return (
    <div class={outerClass}>
      <div class={innerClass} />
    </div>
  );
};

---

@example 62
@input Form with multiple inputs bound to cells.
@output
import { Cell } from 'retend';

const UserForm = () => {
  const name = Cell.source('');
  const age = Cell.source(0);
  const handleNameChange = (event) => {
    name.value = event.target.value;
  };
  const handleAgeChange = (event) => {
    age.value = parseInt(event.target.value, 10) || 0;
  };
  return (
    <form>
      <label>
        Name:
        <input type="text" onInput={handleNameChange} />
      </label>
      <label>
        Age:
        <input type="number" onInput={handleAgeChange} />
      </label>
    </form>
  );
};
@note do not use `value` attribute for input elements.

---

@example 63
@input Div with dynamic id.
@output
import { Cell } from 'retend';

const DynamicIdDiv = () => {
  const id = Cell.source('uniqueId');
  return <div id={id} />;
};

---

@example 64
@input Span with dynamic title attribute.
@output
import { Cell } from 'retend';

const TitleSpan = () => {
  const title = Cell.source('Tooltip text');
  return <span title={title}>Hover me</span>;
};

---

@example 65
@input Image with dynamic alt and src.
@output
import { Cell } from 'retend';

const DynamicImage = () => {
  const src = Cell.source('/image.png');
  const alt = Cell.source('Description');
  return <img src={src} alt={alt} />;
};

---

@example 66
@input Button that increments a counter.
@output
import { Cell } from 'retend';

const CounterButton = () => {
  const count = Cell.source(0);
  const increment = () => {
    count.value++;
  };
  return (
    <div>
      <button type="button" onClick={increment}>Increment</button>
      <p>Count: {count}</p>
    </div>
  );
};

---

@example 67
@input Input that updates a cell on keyup.
@output
import { Cell } from 'retend';

const KeyUpInput = () => {
  const text = Cell.source('');
  const handleKeyUp = (event) => {
    text.value = event.target.value;
  };
  return <input type="text" onKeyUp={handleKeyUp} />;
};

---

@example 68
@input Div with dynamic height and width.
@output
import { Cell } from 'retend';

const SizeDiv = () => {
  const height = Cell.source('100px');
  const width = Cell.source('200px');
  return <div style={{ height: height, width: width }} />;
};

---

@example 69
@input Span with dynamic color and background.
@output
import { Cell } from 'retend';

const ColorSpan = () => {
  const color = Cell.source('red');
  const background = Cell.source('yellow');
  return <span style={{ color: color, backgroundColor: background }}>Text</span>;
};

---

@example 70
@input Link with dynamic target and rel.
@output
import { Cell } from 'retend';

const SecureLink = () => {
  const target = Cell.source('_blank');
  const rel = Cell.source('noopener noreferrer');
  return <a href="https://example.com" target={target} rel={rel}>Link</a>;
};

---

@example 71
@input Input with dynamic min and max.
@output
import { Cell } from 'retend';

const RangeInput = () => {
  const min = Cell.source(0);
  const max = Cell.source(100);
  return <input type="number" min={min} max={max} />;
};

---

@example 72
@input Textarea with dynamic placeholder.
@output
import { Cell } from 'retend';

const PlaceholderTextArea = () => {
  const placeholder = Cell.source('Enter your message');
  return <textarea placeholder={placeholder} />;
};

---

@example 73
@input Button with dynamic formaction.
@output
import { Cell } from 'retend';

const FormActionButton = () => {
  const action = Cell.source('/submit');
  return <button type="submit" formAction={action}>Submit</button>;
};

---

@example 74
@input Div with dynamic role.
@output
import { Cell } from 'retend';

const RoleDiv = () => {
  const role = Cell.source('alert');
  return <div role={role} />;
};

---

@example 75
@input Image with dynamic sizes attribute.
@output
import { Cell } from 'retend';

const SizesImage = () => {
  const sizes = Cell.source('100vw');
  return <img src="/image.png" sizes={sizes} alt="Image" />;
};

---

@example 76
@input Link with dynamic download attribute.
@output
import { Cell } from 'retend';

const DownloadLink = () => {
  const filename = Cell.source('file.txt');
  return <a href="/file.txt" download={filename}>Download</a>;
};

---

@example 77
@input Input with dynamic step.
@output
import { Cell } from 'retend';

const StepInput = () => {
  const step = Cell.source(0.1);
  return <input type="number" step={step} />;
};

---

@example 78
@input Div with dynamic lang attribute.
@output
import { Cell } from 'retend';

const LangDiv = () => {
  const lang = Cell.source('en');
  return <div lang={lang} />;
};

---

@example 79
@input Span with dynamic dir attribute.
@output
import { Cell } from 'retend';

const DirSpan = () => {
  const dir = Cell.source('ltr');
  return <span dir={dir}>Text</span>;
};

---

@example 80
@input Div that logs when a cell changes.
@output
import { Cell } from 'retend';

const LoggingDiv = () => {
  const message = Cell.source('Initial');
  message.listen((value) => {
    console.log(`Message changed to: ${value}`);
  });
  return <div>{message}</div>;
};

---

@example 81
@input Button that updates a cell and logs.
@output
import { Cell } from 'retend';

const UpdateAndLog = () => {
  const count = Cell.source(0);
  count.listen((value) => {
    console.log(`Count is now: ${value}`);
  });
  const increment = () => {
    count.value++;
  };
  return <button type="button" onClick={increment}>Increment</button>;
};

---

@example 82
@input Input that updates a cell and shows the value.
@output
import { Cell } from 'retend';

const InputWithDisplay = () => {
  const text = Cell.source('');
  const handleChange = (event) => {
    text.value = event.target.value;
  };
  return (
    <div>
      <input type="text" onInput={handleChange} />
      <p>You typed: {text}</p>
    </div>
  );
};

---

@example 83
@input Div that shows the length of a string cell.
@output
import { Cell } from 'retend';

const LengthDisplay = () => {
  const text = Cell.source('Hello');
  const length = Cell.derived(() => text.value.length);
  return <div>Length: {length}</div>;
};

---

@example 84
@input Paragraph that shows if a number cell is positive.
@output
import { Cell, If } from 'retend';

const PositiveCheck = () => {
  const number = Cell.source(5);
  const isPositive = Cell.derived(() => number.value > 0);
  return <p>{If(isPositive, () => 'Positive')}</p>;
};
@note `If` is used for conditional rendering.
@note do not use ternary operators for conditional rendering.

---

@example 85
@input Button that toggles visibility of a div.
@output
import { Cell, If } from 'retend';

const ToggleVisibility = () => {
  const isVisible = Cell.source(true);
  const toggle = () => {
    isVisible.value = !isVisible.value;
  };
  return (
    <div>
      <button type="button" onClick={toggle}>Toggle</button>
      {If(isVisible, () => <div>Visible Content</div>)}
    </div>
  );
};
@note `If` is used for conditional rendering.
@note do not use ternary operators for conditional rendering.

---

@example 86
@input List that filters items based on a cell.
@output
import { Cell, For } from 'retend';

const FilteredList = () => {
  const items = Cell.source(['apple', 'banana', 'cherry']);
  const filter = Cell.source('a');
  const filteredItems = Cell.derived(() =>
    items.value.filter(item => item.includes(filter.value))
  );
  const handleInput = (event) => {
    filter.value = event.target.value;
  };
  return (
    <div>
      <input type="text" onInput={handleInput} />
      {For(filteredItems, (item) => (
        <li>{item}</li>
      ))}
    </div>
  );
};
@note `For` is used to render the list items reactively.
@note do not use .map to loop over items in Retend JSX.
@note event handlers should be preferred outside of the JSX, if possible.

---

@example 87
@input Div with dynamic border style.
@output
import { Cell } from 'retend';

const BorderDiv = () => {
  const border = Cell.source('1px solid black');
  return <div style={{ border: border }} />;
};

---

@example 88
@input Span with dynamic font weight.
@output
import { Cell } from 'retend';

const FontWeightSpan = () => {
  const weight = Cell.source('bold');
  return <span style={{ fontWeight: weight }}>Text</span>;
};

---

@example 89
@input Image with dynamic height.
@output
import { Cell } from 'retend';

const HeightImage = () => {
  const height = Cell.source('150px');
  return <img src="/image.png" style={{ height: height }} alt="Image" />;
};

---

@example 90
@input Link with dynamic class and href.
@output
import { Cell } from 'retend';

const ClassLink = () => {
  const className = Cell.source('link-style');
  const href = Cell.source('https://example.com');
  return <a class={className} href={href}>Link</a>;
};

---

@example 91
@input Button with dynamic disabled state and label.
@output
import { Cell } from 'retend';

const DisableButton = () => {
  const isDisabled = Cell.source(false);
  const label = Cell.source('Action');
  return <button type="button" disabled={isDisabled}>{label}</button>;
};

---

@example 92
@input Input with dynamic value and placeholder.
@output
import { Cell } from 'retend';

const ValueInput = () => {
  const value = Cell.source('');
  const placeholder = Cell.source('Type here');
  const handleChange = (event) => {
    value.value = event.target.value;
  };
  return (
    <>
      <input type="text" placeholder={placeholder} onInput={handleChange} />
      <p>You typed: {value}</p>
    </>
  );
};
@note Do not use `value` attribute for input elements.

---

@example 93
@input Div with dynamic margin and padding.
@output
import { Cell } from 'retend';

const SpacingDiv = () => {
  const margin = Cell.source('10px');
  const padding = Cell.source('20px');
  return <div style={{ margin: margin, padding: padding }} />;
};

---

@example 94
@input Span with dynamic text decoration.
@output
import { Cell } from 'retend';

const DecorationSpan = () => {
  const decoration = Cell.source('underline');
  return <span style={{ textDecoration: decoration }}>Text</span>;
};

---

@example 95
@input Image with dynamic object fit.
@output
import { Cell } from 'retend';

const FitImage = () => {
  const fit = Cell.source('cover');
  return <img src="/image.png" style={{ objectFit: fit }} alt="Image" />;
};

---

@example 96
@input Link with dynamic tabindex.
@output
import { Cell } from 'retend';

const TabIndexLink = () => {
  const tabIndex = Cell.source(1);
  return <a href="#" tabIndex={tabIndex}>Link</a>;
};

---

@example 97
@input Button with dynamic formmethod.
@output
import { Cell } from 'retend';

const MethodButton = () => {
  const method = Cell.source('post');
  return <button type="submit" formMethod={method}>Submit</button>;
};

---

@example 98
@input Input with dynamic autocomplete.
@output
import { Cell } from 'retend';

const AutoCompleteInput = () => {
  const autoComplete = Cell.source('off');
  return <input type="text" autoComplete={autoComplete} />;
};

---

@example 99
@input Div with dynamic content editable.
@output
import { Cell } from 'retend';

const EditableDiv = () => {
  const isEditable = Cell.source(true);
  return <div contentEditable={isEditable} />;
};

---

@example 100
@input Counter component with reactive display.
@output
import { Cell } from 'retend';

const Counter = () => {
  const count = Cell.source(0);
  const increaseCount = () => {
    count.value++;
  };
  return (
    <div>
      <output>The count is: {count}</output>
      <button type="button" onClick={increaseCount}>Increase Count</button>
    </div>
  );
};