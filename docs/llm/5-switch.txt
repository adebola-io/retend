--- START OF FILE switch.ref.txt ---

@title switch-usage
@description Demonstrates 20 key examples of the `Switch` function in Retend JSX for conditional branch rendering based on a non-boolean value.
@preamble Examples showcase core `Switch` functionalities including static and reactive values, default cases, JSX fragments, and nested switches. All examples adhere to Retend JSX rules. `Switch` is used for non-boolean conditional rendering and does not accept boolean values or cells directly.

---

@example 1
@input Static string value switch with two cases.
@output
import { Switch } from 'retend';

const caseValue = 'caseA';

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        caseA: () => <p>Case A Content</p>,
        caseB: () => <span>Case B Content</span>,
      })}
    </div>
  );
};

---

@example 2
@input Static string value switch with default case.
@output
import { Switch } from 'retend';

const caseValue = 'caseD';

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        caseA: () => <p>Case A Content</p>,
        caseB: () => <span>Case B Content</span>,
      }, (val) => <p>Default Case Content for: {val}</p>)}
    </div>
  );
};
@note A default case is provided to handle values that do not match any defined cases.

---

@example 3
@input Reactive cell string value switch and button to change case.
@output
import { Switch, Cell } from 'retend';

const caseCell = Cell.source('caseA');

const Component = () => {
  const changeCase = () => {
    caseCell.value = caseCell.value === 'caseA' ? 'caseB' : 'caseA';
  };
  return (
    <div>
      {Switch(caseCell, {
        caseA: () => <p>Case A Content</p>,
        caseB: () => <span>Case B Content</span>,
      })}
      <button onClick={changeCase}>Toggle Case</button>
    </div>
  );
};

---

@example 4
@input Static number value switch.
@output
import { Switch } from 'retend';

const numberCase = 1;

const Component = () => {
  return (
    <div>
      {Switch(numberCase, {
        1: () => <p>Case One</p>,
        2: () => <span>Case Two</span>,
      })}
    </div>
  );
};

---

@example 5
@input Reactive cell number value switch and button to increment.
@output
import { Switch, Cell } from 'retend';

const numberCell = Cell.source(1);

const Component = () => {
  const incrementCase = () => {
    numberCell.value = numberCell.value === 1 ? 2 : 1;
  };
  return (
    <div>
      {Switch(numberCell, {
        1: () => <p>Case One</p>,
        2: () => <span>Case Two</span>,
      })}
      <button onClick={incrementCase}>Toggle Case</button>
    </div>
  );
};

---

@example 6
@input Static symbol value switch (requires Symbol definition).
@output
import { Switch } from 'retend';

const CASE_SYMBOL_A = Symbol('caseA');
const CASE_SYMBOL_B = Symbol('caseB');
const caseValue = CASE_SYMBOL_A;

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        [CASE_SYMBOL_A]: () => <p>Case Symbol A</p>,
        [CASE_SYMBOL_B]: () => <span>Case Symbol B</span>,
      })}
    </div>
  );
};

---

@example 7
@input Static null value switch.
@output
import { Switch } from 'retend';

const caseValue = null;

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        null: () => <p>Case Null</p>,
        'caseB': () => <span>Case B Content</span>,
      })}
    </div>
  );
};

---

@example 8
@input Static undefined value switch.
@output
import { Switch } from 'retend';

let caseValue;

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        undefined: () => <p>Case Undefined</p>,
        'caseB': () => <span>Case B Content</span>,
      })}
    </div>
  );
};

---

@example 9
@input Switch with JSX fragments in cases.
@output
import { Switch } from 'retend';

const caseValue = 'caseA';

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        caseA: () => (
          <>
            <p>Fragment</p>
            <p>Case A Content</p>
          </>
        ),
        caseB: () => (
          <>
            <span>Fragment</span>
            <span>Case B Content</span>
          </>
        ),
      })}
    </div>
  );
};

---

@example 10
@input Switch with nested components in cases.
@output
import { Switch } from 'retend';

const caseValue = 'caseB';

const CaseAComponent = () => <p>Case A Component</p>;
const CaseBComponent = () => <span>Case B Component</span>;

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        caseA: CaseAComponent,
        caseB: CaseBComponent,
      })}
    </div>
  );
};

---

@example 11
@input Nested Switch components.
@output
import { Switch, Cell } from 'retend';

const outerCase = Cell.source('caseA');
const innerCase = Cell.source('caseX');

const Component = () => {
  return (
    <div>
      {Switch(outerCase, {
        caseA: () => Switch(innerCase, {
          caseX: () => <p>Inner Case X</p>,
          caseY: () => <span>Inner Case Y</span>,
        }),
        caseB: () => <span>Outer Case B</span>,
      })}
    </div>
  );
};

---

@example 12
@input Switch with different element types in cases (div, span, p).
@output
import { Switch } from 'retend';

const caseValue = 'caseB';

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        caseA: () => <div>Case A Div</div>,
        caseB: () => <span>Case B Span</span>,
        caseC: () => <p>Case C Paragraph</p>,
      })}
    </div>
  );
};

---

@example 13
@input Switch with style attributes in cases.
@output
import { Switch } from 'retend';

const caseValue = 'caseB';

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        caseA: () => <div style={{ color: 'red' }}>Case A Red Text</div>,
        caseB: () => <span style={{ fontWeight: 'bold' }}>Case B Bold Text</span>,
      })}
    </div>
  );
};

---

@example 14
@input Switch with event handlers (onClick) in cases.
@output
import { Switch } from 'retend';

const caseValue = 'caseA';

const Component = () => {
  const handleCaseAClick = () => alert('Case A Clicked');
  const handleCaseBClick = () => alert('Case B Clicked');

  return (
    <div>
      {Switch(caseValue, {
        caseA: () => <button onClick={handleCaseAClick}>Case A Button</button>,
        caseB: () => <button onClick={handleCaseBClick}>Case B Button</button>,
      })}
    </div>
  );
};

---

@example 15
@input Switch with no matching case and no default case.
@output
import { Switch } from 'retend';

const caseValue = 'caseC';

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        caseA: () => <p>Case A Content</p>,
        caseB: () => <span>Case B Content</span>,
      })}
    </div>
  );
};
@note When no case matches and no default is provided, nothing is rendered for the Switch.

---

@example 16
@input Switch inside a list rendered by For.
@output
import { Switch, For } from 'retend';

const items = ['caseA', 'caseB', 'caseA'];

const Component = () => {
  return (
    <ul>
      {For(items, (item) => (
        <li>
          {Switch(item, {
            caseA: () => <p>Case A in List</p>,
            caseB: () => <span>Case B in List</span>,
          })}
        </li>
      ))}
    </ul>
  );
};

---

@example 17
@input Switch with default case using component as default.
@output
import { Switch } from 'retend';

const caseValue = 'caseC';

const DefaultCaseComponent = ({ value }) => <p>Default Component for: {value}</p>;

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        caseA: () => <p>Case A Content</p>,
        caseB: () => <span>Case B Content</span>,
      }, DefaultCaseComponent)}
    </div>
  );
};

---

@example 18
@input Switch with default case receiving the value as argument.
@output
import { Switch } from 'retend';

const caseValue = 'caseC';

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        caseA: () => <p>Case A Content</p>,
        caseB: () => <span>Case B Content</span>,
      }, (value) => <p>Default Case Value: {value}</p>)}
    </div>
  );
};
@note The default case function receives the switch value as its first argument.

---

@example 19
@input Switch with cases as functions.
@output
import { Switch } from 'retend';

const caseValue = 'caseA';

const caseAContent = () => <p>Case A Function Content</p>;
const caseBContent = () => <span>Case B Function Content</span>;

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        caseA: caseAContent,
        caseB: caseBContent,
      })}
    </div>
  );
};
@note Cases can directly be functions that return JSX templates.

---

@example 20
@input Switch with default case as arrow function.
@output
import { Switch } from 'retend';

const caseValue = 'caseC';

const Component = () => {
  return (
    <div>
      {Switch(caseValue, {
        caseA: () => <p>Case A Content</p>,
        caseB: () => <span>Case B Content</span>,
      }, (value) => (
        <p>Default Arrow Function Case: {value}</p>
      ))}
    </div>
  );
};
@note Default case can also use arrow function syntax.